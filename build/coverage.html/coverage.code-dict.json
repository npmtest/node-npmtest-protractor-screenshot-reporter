{"/home/travis/build/npmtest/node-npmtest-protractor-screenshot-reporter/test.js":"/* istanbul instrument in package npmtest_protractor_screenshot_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-protractor-screenshot-reporter/lib.npmtest_protractor_screenshot_reporter.js":"/* istanbul instrument in package npmtest_protractor_screenshot_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_protractor_screenshot_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_protractor_screenshot_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-protractor-screenshot-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-protractor-screenshot-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_protractor_screenshot_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_protractor_screenshot_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_protractor_screenshot_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_protractor_screenshot_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_protractor_screenshot_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_protractor_screenshot_reporter.__dirname + '/lib.npmtest_protractor_screenshot_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-protractor-screenshot-reporter/node_modules/protractor-screenshot-reporter/index.js":"var util = require('./lib/util')\n\t, mkdirp = require('mkdirp')\n\t, path = require('path');\n\n/** Function: defaultPathBuilder\n * This function builds paths for a screenshot file. It is appended to the\n * constructors base directory and gets prependend with `.png` or `.json` when\n * storing a screenshot or JSON meta data file.\n *\n * Parameters:\n *     (Object) spec - The spec currently reported\n *     (Array) descriptions - The specs and their parent suites descriptions\n *     (Object) result - The result object of the current test spec.\n *     (Object) capabilities - WebDrivers capabilities object containing\n *                             in-depth information about the Selenium node\n *                             which executed the test case.\n *\n * Returns:\n *     (String) containing the built path\n */\nfunction defaultPathBuilder(spec, descriptions, results, capabilities) {\n\treturn util.generateGuid();\n}\n\n/** Function: defaultMetaDataBuilder\n * Uses passed information to generate a meta data object which can be saved\n * along with a screenshot.\n * You do not have to add the screenshots file path since this will be appended\n * automatially.\n *\n * Parameters:\n *     (Object) spec - The spec currently reported\n *     (Array) descriptions - The specs and their parent suites descriptions\n *     (Object) result - The result object of the current test spec.\n *     (Object) capabilities - WebDrivers capabilities object containing\n *                             in-depth information about the Selenium node\n *                             which executed the test case.\n *\n * Returns:\n *     (Object) containig meta data to store along with a screenshot\n */\nfunction defaultMetaDataBuilder(spec, descriptions, results, capabilities) {\n\tvar metaData = {\n\t\t\tdescription: descriptions.reverse().join(' ')\n\t\t\t, passed: results.passed()\n\t\t\t, os: capabilities.caps_.platform\n\t\t\t, browser: {\n\t\t\t\tname: capabilities.caps_.browserName\n\t\t\t\t, version: capabilities.caps_.version\n\t\t\t}\n\t\t};\n\n\tif(results.items_.length > 0) {\n\t\tvar result = results.items_[0];\n\t\tmetaData.message = result.message;\n\t\tmetaData.trace = result.trace.stack;\n\t}\n\n\treturn metaData;\n}\n\n\n\n/** Class: ScreenshotReporter\n * Creates a new screenshot reporter using the given `options` object.\n *\n * For more information, please look at the README.md file.\n *\n * Parameters:\n *     (Object) options - Object with options as described below.\n *\n * Possible options:\n *     (String) baseDirectory - The path to the directory where screenshots are\n *                              stored. If not existing, it gets created.\n *                              Mandatory.\n *     (Function) pathBuilder - A function which returns a path for a screenshot\n *                              to be stored. Optional.\n *     (Function) metaDataBuilder - Function which returns an object literal\n *                                  containing meta data to store along with\n *                                  the screenshot. Optional.\n *     (Boolean) takeScreenShotsForSkippedSpecs - Do you want to capture a\n *                                                screenshot for a skipped spec?\n *                                                Optional (default: false).\n */\nfunction ScreenshotReporter(options) {\n\toptions = options || {};\n\n\tif(!options.baseDirectory || options.baseDirectory.length === 0) {\n\t\tthrow new Error('Please pass a valid base directory to store the ' +\n\t\t\t'screenshots into.');\n\t} else {\n\t\tthis.baseDirectory = options.baseDirectory;\n\t}\n\n\tthis.pathBuilder = options.pathBuilder || defaultPathBuilder;\n\tthis.metaDataBuilder = options.metaDataBuilder || defaultMetaDataBuilder;\n\tthis.takeScreenShotsForSkippedSpecs =\n\t\toptions.takeScreenShotsForSkippedSpecs || false;\n\tthis.takeScreenShotsOnlyForFailedSpecs =\n\t\toptions.takeScreenShotsOnlyForFailedSpecs || false;\n}\n\n/** Function: reportSpecResults\n * Called by Jasmine when reporteing results for a test spec. It triggers the\n * whole screenshot capture process and stores any relevant information.\n *\n * Parameters:\n *     (Object) spec - The test spec to report.\n */\nScreenshotReporter.prototype.reportSpecResults =\nfunction reportSpecResults(spec) {\n\t/* global browser */\n\tvar self = this\n\t\t, results = spec.results()\n\n\tif(!self.takeScreenShotsForSkippedSpecs && results.skipped) {\n\t\treturn;\n\t}\n\tif(self.takeScreenShotsOnlyForFailedSpecs && results.passed()) {\n\t\treturn;\n\t}\n\n\tbrowser.takeScreenshot().then(function (png) {\n\t\tbrowser.getCapabilities().then(function (capabilities) {\n\t\t\tvar descriptions = util.gatherDescriptions(\n\t\t\t\t\tspec.suite\n\t\t\t\t\t, [spec.description]\n\t\t\t\t)\n\n\n\t\t\t\t, baseName = self.pathBuilder(\n\t\t\t\t\tspec\n\t\t\t\t\t, descriptions\n\t\t\t\t\t, results\n\t\t\t\t\t, capabilities\n\t\t\t\t)\n\t\t\t\t, metaData = self.metaDataBuilder(\n\t\t\t\t\tspec\n\t\t\t\t\t, descriptions\n\t\t\t\t\t, results\n\t\t\t\t\t, capabilities\n\t\t\t\t)\n\n\t\t\t\t, screenShotFile = baseName + '.png'\n\t\t\t\t, metaFile = baseName + '.json'\n\t\t\t\t, screenShotPath = path.join(self.baseDirectory, screenShotFile)\n\t\t\t\t, metaDataPath = path.join(self.baseDirectory, metaFile)\n\n\t\t\t\t// pathBuilder can return a subfoldered path too. So extract the\n\t\t\t\t// directory path without the baseName\n\t\t\t\t, directory = path.dirname(screenShotPath);\n\n\n\t\t\tmetaData.screenShotFile = screenShotFile;\n\t\t\tmkdirp(directory, function(err) {\n\t\t\t\tif(err) {\n\t\t\t\t\tthrow new Error('Could not create directory ' + directory);\n\t\t\t\t} else {\n\t\t\t\t\tutil.storeScreenShot(png, screenShotPath);\n\t\t\t\t\tutil.storeMetaData(metaData, metaDataPath);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n\n};\n\nmodule.exports = ScreenshotReporter;\n","/home/travis/build/npmtest/node-npmtest-protractor-screenshot-reporter/node_modules/protractor-screenshot-reporter/lib/util.js":"var fs = require('fs')\n\t, path = require('path')\n\t, mkdirp = require('mkdirp')\n\t, crypto = require('crypto');\n\n/** Function: storeScreenShot\n * Stores base64 encoded PNG data to the file at the given path.\n *\n * Parameters:\n *     (String) data - PNG data, encoded in base64\n *     (String) file - Target file path\n */\nfunction storeScreenShot(data, file) {\n\tvar stream = fs.createWriteStream(file);\n\n\tstream.write(new Buffer(data, 'base64'));\n\tstream.end();\n}\n\n/** Function: storeMetaData\n * Converts the metaData object to a JSON string and stores it to the file at\n * the given path.\n *\n * Parameters:\n *     (Object) metaData - Object to save as JSON\n *     (String) file - Target file path\n */\nfunction storeMetaData(metaData, file) {\n\tvar json\n\t\t, stream;\n\n\ttry {\n\t\tjson = JSON.stringify(metaData);\n\t\tstream = fs.createWriteStream(file);\n\n\t\tstream.write(json);\n\t\tstream.end();\n\t} catch(e) {\n\t\tconsole.error('Could not save meta data for ' + screenShotFile);\n\t}\n}\n\n/** Function: gatherDescriptions\n * Traverses the parent suites of a test spec recursivly and gathers all\n * descriptions. Finally returns them as an array.\n *\n * Example:\n * If your test file has the following structure, this function returns an\n * array like ['My Tests', 'Module 1', 'Case A'] when executed for `Case A`:\n *\n *     describe('My Tests', function() {\n *         describe('Module 1', function() {\n *             it('Case A', function() { /* ... * / });\n *         });\n *     });\n *\n * Parameters:\n *     (Object) suite - Test suite\n *     (Array) soFar - Already gathered descriptions. On first call, pass an\n *                     array containing the specs description itself.\n *\n * Returns:\n *     (Array) containing the descriptions of all parental suites and the suite\n *             itself.\n */\nfunction gatherDescriptions(suite, soFar) {\n\tsoFar.push(suite.description);\n\n\tif(suite.parentSuite) {\n\t\treturn gatherDescriptions(suite.parentSuite, soFar);\n\t} else {\n\t\treturn soFar;\n\t}\n}\n\n/** Function: generateGuid\n * Generates a GUID using node.js' crypto module.\n *\n * Returns:\n *     (String) containing a guid\n */\nfunction generateGuid() {\n    var buf = new Uint16Array(8);\n    buf = crypto.randomBytes(8);\n    var S4 = function(num) {\n            var ret = num.toString(16);\n            while(ret.length < 4){\n                    ret = \"0\"+ret;\n            }\n            return ret;\n    };\n\n    return (\n            S4(buf[0])+S4(buf[1])+\"-\"+S4(buf[2])+\"-\"+S4(buf[3])+\"-\"+\n            S4(buf[4])+\"-\"+S4(buf[5])+S4(buf[6])+S4(buf[7])\n    );\n}\n\nmodule.exports = {\n\tstoreScreenShot: storeScreenShot\n\t, storeMetaData: storeMetaData\n\t, gatherDescriptions: gatherDescriptions\n\t, generateGuid: generateGuid\n};"}